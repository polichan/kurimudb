import{o as n,c as s,a}from"./app.1f1a6988.js";const p='{"title":"模型","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"起步","slug":"起步"},{"level":2,"title":"创建模型","slug":"创建模型"},{"level":2,"title":"模型方法","slug":"模型方法"},{"level":2,"title":"集合模型","slug":"集合模型"},{"level":2,"title":"模型填充","slug":"模型填充"},{"level":2,"title":"深克隆","slug":"深克隆"},{"level":2,"title":"类 Storage Api","slug":"类-storage-api"},{"level":2,"title":"全部数据","slug":"全部数据"}],"relativePath":"model.md","lastUpdated":1620272523235}',e={},t=a('<h1 id="模型"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h1><p>在前文中，我们介绍了基础用法，并使用了 <code>kurimudb-zero-config</code> 这个零配置包。通常来说，这已经能满足我们的需求啦。</p><p>可如果我们正在开发一个复杂的单页应用的话，想象一下：我们真的要，把各种数据都乱糟糟地塞在一个对象里吗？这可不是什么好办法。</p><p>这个时候，就该 <strong>模型 (Model) 功能</strong> 闪亮登场啦！ 🎉</p><h2 id="起步"><a class="header-anchor" href="#起步" aria-hidden="true">#</a> 起步</h2><p>模型是存储和管理你应用数据的中心，之前我们使用的零配置包中，<code>memory</code>、<code>local</code>、<code>cookie</code> 和 <code>db</code> 对象，其实都是模型哦！</p><p>继续之前，我们先安装 Kurimudb 本体吧：</p><div class="language-bash line-numbers-mode"><pre><code><span class="token function">npm</span> i kurimudb@3\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="创建模型"><a class="header-anchor" href="#创建模型" aria-hidden="true">#</a> 创建模型</h2><p>创建一个模型其实很简单，只需要继承 Kurimudb 的模型类即可：</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// 创建一个 /models/configState.js 文件</span>\n<span class="token comment">// 我们可以拿它来存和用户配置有关的数据</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;configState&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模型名称，必须是唯一的</span>\n      type<span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模型的主键类型</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ConfigState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>如此，你就拥有了一个 <code>ConfigState</code> 模型，它是一个 <strong>键值对模型</strong>，使用时则更加简单：</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> configState <span class="token keyword">from</span> <span class="token string">&quot;./models/configState.js&quot;</span><span class="token punctuation">;</span>\n\nconfigState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 写入..</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取..</span>\n<span class="token keyword">delete</span> configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>say<span class="token punctuation">;</span> <span class="token comment">// 删除..</span>\n<span class="token string">&quot;say&quot;</span> <span class="token keyword">in</span> configState<span class="token punctuation">;</span> <span class="token comment">// 判断是否存在..</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="模型方法"><a class="header-anchor" href="#模型方法" aria-hidden="true">#</a> 模型方法</h2><p>在模型类上，我们还可以添加<strong>任何方法</strong>哦！就像：</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// /models/configState.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ..</span>\n\n  <span class="token comment">// 添加一个模型方法</span>\n  <span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token parameter">bar<span class="token punctuation">,</span> foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 各种逻辑..</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>bar <span class="token operator">=</span> bar<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 模型的方法也可以是异步的</span>\n  <span class="token keyword">async</span> <span class="token function">calcBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ..</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ConfigState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>使用时，直接在模型上调用即可：</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> configState <span class="token keyword">from</span> <span class="token string">&quot;./models/configState.js&quot;</span><span class="token punctuation">;</span>\n\nconfigState<span class="token punctuation">.</span><span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> configState<span class="token punctuation">.</span><span class="token function">calcBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="集合模型"><a class="header-anchor" href="#集合模型" aria-hidden="true">#</a> 集合模型</h2><p>在前文中，我们的模型都是键值对模型，它们用起来就像对象那样：</p><div class="language-js line-numbers-mode"><pre><code>configState<span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>我们也有时，可能也需要一个以集合的方式、添加数据时主键会自动递增的模型，有些类似数组：</p><div class="language-js line-numbers-mode"><pre><code>configState<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">700</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>集合模型常见的应用场景是各种列表，比如缓存的视频列表、用户的草稿箱列表…… 接下来，假设我们正在开发一个便签应用，需要在本地存储用户写的便签。</p><p>让我们来新建一个 <code>NoteList</code> 模型：</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token comment">// 创建一个 /models/noteList.js 文件</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 继承 Models.collection 来让它变成一个集合模型</span>\n<span class="token keyword">class</span> <span class="token class-name">NoteList</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>collection</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;noteList&quot;</span><span class="token punctuation">,</span>\n      type<span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 集合模型的类型需要是 number 哦！</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">NoteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>使用时，通过 <code>insert</code> 方法来创建的数据，主键会自增：</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> noteList <span class="token keyword">from</span> <span class="token string">&quot;@/models/noteList&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> note1 <span class="token operator">=</span> noteList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;This is the content of note 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> note2 <span class="token operator">=</span> noteList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;This is the content of note 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noteList<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// echo &quot;This is the content of note 1&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>noteList<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// echo &quot;This is the content of note 2&quot;</span>\n\n<span class="token comment">// 获取模型的所有数据..</span>\nnoteList<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>大功告成啦。</p><div class="tip custom-block"><p class="custom-block-title">小贴士</p><ol><li>集合模型的主键是从 <code>1</code> 开始递增的，这和数组不同。这么设计是为了更好的兼容 IndexedDB，因为 IndexedDB 是从 <code>1</code> 开始的。</li><li>集合模型中，删除任意值，不会导致其他值的主键变动，这和数组不同。也就是说，主键可以视为唯一且不变的。</li><li>集合模型的主键，类型必须是 <code>number</code> 才行哦！</li></ol></div><h2 id="模型填充"><a class="header-anchor" href="#模型填充" aria-hidden="true">#</a> 模型填充</h2><p>我们可能想为一些模型填充初始值。例如，我们在做一个电子书应用，希望在用户首次使用时，为他指定一个默认的字体大小、主题、翻页模式……</p><p>那么可以在模型中的构造方法中，调用 <code>seed</code> 方法，来填充初始值：</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token comment">// /models/configState.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ..</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>向 <code>seed</code> 方法传递的闭包函数，会在用户每次访问此页面时会运行一次。</p><p>如果模型配置了<a href="/persistence.html">存储驱动</a>，那么只有在用户首次访问此页面时，<code>seed</code> 方法才会运行你传递的闭包函数。</p><h2 id="深克隆"><a class="header-anchor" href="#深克隆" aria-hidden="true">#</a> 深克隆</h2><p>在继续探索之前，我们先聊聊 JavaScript 中一个的知识：你将对象或数组，赋值给另一个变量时，<strong>传递的其实是原先变量的引用</strong>，请看下面的例子：</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> number1 <span class="token operator">=</span> <span class="token number">965</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> number2 <span class="token operator">=</span> number1<span class="token punctuation">;</span>\nnumber1 <span class="token operator">=</span> <span class="token number">996</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// echo 965</span>\n\n<span class="token keyword">let</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">965</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> object2 <span class="token operator">=</span> object1<span class="token punctuation">;</span>\nobject1<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">996</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// echo 996</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>JavaScript 的这个特性，会导致<strong>副作用</strong>产生，成为 bug 的根源。因此，为了尽量保证数据的不可变性，你向 Kurimudb 存入数据时，我们会数据进行<strong>深克隆 (deep clone)</strong>。读取数据时，它与原值是完全脱钩的。</p><p>对于 <strong>朴素对象 (plain object)</strong> 来说，深克隆没什么好担心的，但对于别的对象，如 <code>new Set(...)</code> 或 <code>new Blob(...)</code> 等，由于我们只能克隆其<strong>可枚举属性</strong>，深克隆会导致其丢失内容。</p><p>因此，我们提供了一份白名单。如果你的数据或其内部有这些对象，则 Kurimudb 不会深克隆它们。</p><div class="language-yaml line-numbers-mode"><pre><code><span class="token punctuation">-</span> Boolean\n<span class="token punctuation">-</span> String\n<span class="token punctuation">-</span> Date\n<span class="token punctuation">-</span> RegExp\n<span class="token punctuation">-</span> Blob\n<span class="token punctuation">-</span> File\n<span class="token punctuation">-</span> FileList\n<span class="token punctuation">-</span> ArrayBuffer\n<span class="token punctuation">-</span> DataView\n<span class="token punctuation">-</span> Uint8ClampedArray\n<span class="token punctuation">-</span> ImageData\n<span class="token punctuation">-</span> Map\n<span class="token punctuation">-</span> Set\n<span class="token punctuation">-</span> Symbol\n<span class="token punctuation">-</span> HTMLDivElement\n<span class="token comment"># 通过 `yourObj.constructor.name` 来判断</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>如果你想在某个模型中，覆盖这份白名单，你可以：</p><div class="language-js line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Models <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;kurimudb&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConfigState</span> <span class="token keyword">extends</span> <span class="token class-name">Models<span class="token punctuation">.</span>keyValue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;configState&quot;</span><span class="token punctuation">,</span>\n      type<span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n      intrinsicTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;File&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FileList&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果你想对任何对象<strong>都</strong>进行深克隆，你可以直接传入一个空数组：</p><div class="language-yaml line-numbers-mode"><pre><code><span class="token key atrule">intrinsicTypes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>如果你想对任何对象<strong>都不</strong>进行深克隆，你可以传入 <code>false</code>：</p><div class="language-yaml line-numbers-mode"><pre><code><span class="token key atrule">intrinsicTypes</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>如果你想手动进行深克隆，你可以调用模型上的 <code>deepClone</code> 函数：</p><div class="language-js line-numbers-mode"><pre><code>yourModel<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span>yourOldObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="类-storage-api"><a class="header-anchor" href="#类-storage-api" aria-hidden="true">#</a> 类 Storage Api</h2><p>你还可以使用类似 <a href="https://developer.mozilla.org/docs/Web/API/Storage" target="_blank" rel="noopener noreferrer">Storage</a> 的 Api 来增删改查数据：</p><div class="language-js line-numbers-mode"><pre><code>local<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// create it</span>\n<span class="token keyword">let</span> say <span class="token operator">=</span> local<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// retrieve it</span>\nlocal<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete it</span>\nlocal<span class="token punctuation">.</span><span class="token function">subscribeItem</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// subscribe it</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>📜 使用此功能需要 (^3.1.2) 版本。</p></blockquote><h2 id="全部数据"><a class="header-anchor" href="#全部数据" aria-hidden="true">#</a> 全部数据</h2><p>调用 <code>all</code> 函数，可以获取此模型的全部数据。(注意：对于配置了 LocalStorage 驱动的模型来说，暂时无法获取全部数据，后续迭代将完善此功能)</p><div class="language-js line-numbers-mode"><pre><code>yourModel<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>',58);e.render=function(a,p,e,o,c,l){return n(),s("div",null,[t])};export default e;export{p as __pageData};
